{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"xiumao","url":"https://xiumao.github.io/blog"},"pages":[],"posts":[{"title":"todo","slug":"todo","date":"2019-03-25T03:15:38.000Z","updated":"2019-03-27T04:10:32.283Z","comments":true,"path":"2019/03/25/todo/","link":"","permalink":"https://xiumao.github.io/blog/2019/03/25/todo/","excerpt":"2019","text":"2019 laravel 扩展包 短信防刷扩展包 发布系统扩展包 研究阿里SKD代码 开发个人小程序 折腾docker + k8s + Jenkins 学习GO语言编写定时脚本任务","categories":[],"tags":[],"keywords":[]},{"title":"linux","slug":"linux/docker","date":"2019-03-14T11:21:50.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2019/03/14/linux/docker/","link":"","permalink":"https://xiumao.github.io/blog/2019/03/14/linux/docker/","excerpt":"","text":"docker官网文档 https://docs.docker.com/ 参考资料sudo yum install -y yum-utils device-mapper-persistent-data lvm2 sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum-config-manager --enable docker-ce-edge sudo yum-config-manager --enable docker-ce-test sudo yum-config-manager --disable docker-ce-edge sudo yum install docker-ce -y sudo systemctl start docker $ curl -L https://github.com/docker/machine/releases/download/v0.12.0/docker-machine-`uname -s`-`uname -m` &gt; /tmp/docker-machine $ chmod +x /tmp/docker-machine $ sudo mv /tmp/docker-machine /usr/local/bin/docker-machine linux virtualbox https://www.cnblogs.com/wangshuyi/p/6927113.html","categories":[],"tags":[],"keywords":[]},{"title":"linux","slug":"linux/ssh_gui","date":"2019-03-08T13:21:32.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2019/03/08/linux/ssh_gui/","link":"","permalink":"https://xiumao.github.io/blog/2019/03/08/linux/ssh_gui/","excerpt":"","text":"SecureCRTSecureCRT 超时自动断开连接 很影响工作 解决办法： Options-&gt;Session Options-&gt;Terminal-&gt;Anti-idle-&gt;勾选Send protocol NO-OP (中文版：选项-&gt;会话选项-&gt;终端-&gt;反空闲-&gt;发送协议NO-OP) 后面的设置时间默认的是60秒，只要小于自动断开连接的时限就可以了。如下图所示： SecureCRT 配置","categories":[],"tags":[],"keywords":[]},{"title":"tools","slug":"tools/extension","date":"2019-03-05T06:23:37.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2019/03/05/tools/extension/","link":"","permalink":"https://xiumao.github.io/blog/2019/03/05/tools/extension/","excerpt":"","text":"谷歌插件Clear Cache Clear Cache ShowIp ShowIp IP 域国家国旗 IP 域国家国旗 Postman Postman 前端助手 前端助手","categories":[],"tags":[],"keywords":[]},{"title":"linux","slug":"linux/php_ext","date":"2019-02-22T01:52:02.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2019/02/22/linux/php_ext/","link":"","permalink":"https://xiumao.github.io/blog/2019/02/22/linux/php_ext/","excerpt":"","text":"PHP扩展安装 下载tgz文件 例如 wget http://pecl.php.net/get/mongo-1.5.1.tgz tar zxvf mongo-1.5.1.tgz # 解压 cd mongo-1.5.1 /usr/local/php/bin/phpize ./configure --with-php-config=/usr/local/php/bin/php-config make &amp;&amp; make install # 编译安装 vim /usr/local/php/etc/php.ini #编辑，在最后一行添加下面的代码 extension=&quot;mongo.so&quot; :wq! #保存退出 service php-fpm reload #重新加载php-fpm phpinfo() # 查看扩展安装是否成功","categories":[],"tags":[],"keywords":[]},{"title":"linux","slug":"linux/mysqldump","date":"2019-02-22T01:52:02.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2019/02/22/linux/mysqldump/","link":"","permalink":"https://xiumao.github.io/blog/2019/02/22/linux/mysqldump/","excerpt":"","text":"mysqldump指令 -h [IP或者域名] -u [账号] -p [密码] 导出命令mysqldump -h -u -p database_name table_name &gt; target.sql 导入命令mysql.exe -h -u -p database_name &lt; /tmp/database_name.sql","categories":[],"tags":[],"keywords":[]},{"title":"linux","slug":"linux/rsync","date":"2019-02-20T02:31:56.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2019/02/20/linux/rsync/","link":"","permalink":"https://xiumao.github.io/blog/2019/02/20/linux/rsync/","excerpt":"","text":"Rsyncrsync安装 yum install -y rsync //7.4系统默认已安装，不需要额外安装 命令netstat -a | grep rsync ps -aux | grep rsync rsync --daemon kill -9 pid 配置 B机器 文件 /etc/rsyncd.conf uid = www gid = www read only = no use chroot = yes max connections = 8 #最大连接数 read only = no pid file = /var/run/rsyncd.pid lock file = /var/log/rsync.lock log file = /var/log/rsyncd.log address = 172.19.6.xxx //自己的地址 hosts allow = 172.19.153.xxx #允许访问ip [yaf]//共享模块名称 path = /home/wwwroot //源目录实际路径 可选参数 port 873 //默认端口 comment = Document Root of www.aa.com //描述备注信息 read only = yes //只读 no 可读可写则是yes dont compress = .gz .bz2 .tgz .zip .rar .z //排除的压缩类型 auth users = backuper //授权登陆rsync的账户（不是系统用户） secrets file = /etc/rsyncd.secret //存放账户的文件 文件 /etc/rsyncd.secret backuper:123456 A机器同步至B机器 /usr/bin/rsync -avzP /root/xx.md 172.19.6.102::yaf","categories":[],"tags":[],"keywords":[]},{"title":"linux","slug":"linux/samba","date":"2019-02-19T03:44:59.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2019/02/19/linux/samba/","link":"","permalink":"https://xiumao.github.io/blog/2019/02/19/linux/samba/","excerpt":"","text":"SAMBA 服务 samba配置参考链接 安装yum -y install samba yum -y install samba-client systemctl restart smb useradd root pdbedit -a root 配置vim /etc/samba/smb.conf [global] workgroup = MYGROUP [wwwroot] path = / public = yes browseable = yes writable = yes write list = root valid users = root 测试[root@myhost2 ~]# smbclient -U user //192.168.4.7/tools（共享名） Enter user&apos;s password: //输入samba用户user的密码 Domain=[SAMBA] OS=[Windows 6.1] Server=[Samba 4.2.3] smb: \\&gt; ls . D 0 Fri Jul 28 22:02:25 2017 .. DR 0 Fri Jul 28 21:32:58 2017 D 0 Fri Jul 28 22:02:25 2017 帮助1、客户端登录samba时出现以下提示： session setup failed: NT_STATUS_LOGON_FAILURE 该错误提示表示用户有误，可能是用户不存在，也可能是密码错误，或者只是在samba用户和系统用户及密码出现错误，总之就是用户和密码的问题。 tree connect failed: NT_STATUS_BAD_NETWORK_NAME 该错误表示坏的网络名，表示共享目录不存在，或共享目录权限问题 可用setfacl -m给用户加权限 Connection to 192.168.4.7 failed (Error NT_STATUS_HOST_UNREACHABLE) 2、客户端连接到samba共享目录时出现以下提示： smb: \\&gt; ls NT_STATUS_ACCESS_DENIED listing \\* 文件权限不足，或者存在selinux限制 调整文件的权限，并打开selinux开关 3、执行setsebool -P 操作启用SElinux开关参数时失败，提示：Killed 内存不足，而且交换空间也不足 添加交换分区（1GB）在重试 （以下内容均来自网络学习） root用户执行 1、使用yum -y install samba samba-client samba-common安装Samba rpm -qi samba可以查看samba版本信息 [root@MiWiFi-R1CM-srv samba]# rpm -qi samba Name : samba Epoch : 0 Version : 4.2.10 Release : 6.2.el7_2 Architecture: x86_64 Install Date: Tue 19 Jul 2016 03:26:55 AM CST Group : System Environment/Daemons Size : 1895784 License : GPLv3+ and LGPLv3+ Signature : RSA/SHA256, Fri 24 Jun 2016 04:12:11 AM CST, Key ID 24c6a8a7f4a80eb5 Source RPM : samba-4.2.10-6.2.el7_2.src.rpm Build Date : Fri 24 Jun 2016 02:38:45 AM CST Build Host : worker1.bsys.centos.org Relocations : (not relocatable) Packager : CentOS BuildSystem &lt;http://bugs.centos.org&gt; Vendor : CentOS URL : http://www.samba.org/ Summary : Server and Client software to interoperate with Windows machines Description : Samba is the standard Windows interoperability suite of programs for Linux and Unix. [root@MiWiFi-R1CM-srv samba]# 2、设置开机启动： # systemctl enable smb.service 3、查看是否设置成功 # systemctl status smb.service 4、启动samba服务 # systemctl start smb.service 5、再次查看启动状态 # systemctl status smb.service [root@MiWiFi-R1CM-srv samba]# systemctl status smb.service ● smb.service - Samba SMB Daemon Loaded: loaded (/usr/lib/systemd/system/smb.service; enabled; vendor preset: disabled) Active: active (running) since Tue 2016-07-19 03:32:36 CST; 12min ago Main PID: 27455 (smbd) Status: &quot;smbd: ready to serve connections...&quot; CGroup: /system.slice/smb.service ├─27455 /usr/sbin/smbd ├─27460 /usr/sbin/smbd └─27601 /usr/sbin/smbd Jul 19 03:32:36 MiWiFi-R1CM-srv systemd[1]: Starting Samba SMB Daemon... Jul 19 03:32:36 MiWiFi-R1CM-srv systemd[1]: smb.service: Supervising process 27455 which is not our child. We&apos;ll most likely not n... exits. Jul 19 03:32:36 MiWiFi-R1CM-srv systemd[1]: Started Samba SMB Daemon. Jul 19 03:32:36 MiWiFi-R1CM-srv smbd[27455]: [2016/07/19 03:32:36.184968, 0] ../lib/util/become_daemon.c:124(daemon_ready) Jul 19 03:32:36 MiWiFi-R1CM-srv smbd[27455]: STATUS=daemon &apos;smbd&apos; finished starting up and ready to serve connections Hint: Some lines were ellipsized, use -l to show in full. [root@MiWiFi-R1CM-srv samba]# 6、配置配置文件 进入目录： # cd /etc/samba 备份： # cp smb.conf smb.conf.backup 修改smb.conf文件，找到“[homes]”，修改以下设置： [global] log file = /var/log/samba/log.%m load printers = yes cups options = raw server string = Samba Server Version %v writeable = yes force directory mode = 777 force create mode = 777 workgroup = MYGROUP security = user create mode = 777 passdb backend = tdbsam max log size = 50 新版的samba放在smb.conf最后是无效的 7、添加用户 # smbpasswd -a username 如果出现bash: smbpasswd: command not found，就是没有安装samba-client了 附： smbpasswd命令的常用方法 smbpasswd -a 增加用户（要增加的用户必须以是系统用户） smbpasswd -d 冻结用户，就是这个用户不能在登录了 smbpasswd -e 恢复用户，解冻用户，让冻结的用户可以在使用 smbpasswd -n 把用户的密码设置成空.要在global中写入 null passwords -true smbpasswd -x 删除用户 8、selinux设置 # getsebool -a | grep samba # setsebool -P samba_enable_home_dirs on 9、防火墙，使用新的防火墙firewall添加就可以，比iptables更方便 # firewall-cmd --list-services # firewall-cmd --permanent --add-service=samba # firewall-cmd --reload # firewall-cmd --list-services 由于redhat7开始，iptables被firewalld代替了，所以使用firewalld的方法 关于firewalld的说明，可以看fedora官网介绍 https://fedoraproject.org/wiki/FirewallD/zh-cn 10、重启samba服务 # systemctl restart smb.service","categories":[],"tags":[],"keywords":[]},{"title":"tools","slug":"tools/vpn","date":"2019-02-15T12:36:01.000Z","updated":"2019-03-27T02:08:04.305Z","comments":true,"path":"2019/02/15/tools/vpn/","link":"","permalink":"https://xiumao.github.io/blog/2019/02/15/tools/vpn/","excerpt":"","text":"VPN搭建搭建命令 L2TP/IPSec一键安装脚本 wget --no-check-certificate https://raw.githubusercontent.com/teddysun/across/master/l2tp.sh chmod +x l2tp.sh ./l2tp.sh 配置DHCPcd /etc/sysconfig/network-scripts/ #进入网络配置文件目录 vim ifcfg-eth0 #编辑配置文件，添加修改以下内容 HWADDR=00:0c:29:58:27:57 ONBOOT=yes #开启自动启用网络连接 这里增加了第一行的mac地址，最后一行修改成了yes开启网络连接 接下来重启网卡让网卡设置生效； :wq！ #保存退出 service network restart #重启网络 systemctl start|stop|restart|status ipsec （CentOS7 下使用） systemctl start|stop|restart xl2tpd （CentOS7 下使用） /etc/xl2tpd/xl2tpd.conf local_ip = 内网IP","categories":[],"tags":[],"keywords":[]},{"title":"tools","slug":"tools/walle","date":"2019-02-14T06:31:05.000Z","updated":"2019-03-27T02:08:04.305Z","comments":true,"path":"2019/02/14/tools/walle/","link":"","permalink":"https://xiumao.github.io/blog/2019/02/14/tools/walle/","excerpt":"","text":"walle 安装教程 检测错误","categories":[],"tags":[],"keywords":[]},{"title":"tools","slug":"tools/operate","date":"2019-01-18T07:18:44.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2019/01/18/tools/operate/","link":"","permalink":"https://xiumao.github.io/blog/2019/01/18/tools/operate/","excerpt":"","text":"数据指标 | 游戏数据分析指标一、运营数据1平均同时在线人数（ACU: Average concurrent users）：即在一定时间段抓取一次数据，以一定周期为期限；周期内的ACU可取时间段的平均数据。[例如：系统每一小时抓取一次数据，全天24小时共24个不同时刻的在线数据，则每天的ACU是这24个数据的平均值（每个公司有每个公司的定义，一般ACU取平均值，若针对某一时刻，则直接在某时刻内直接统计用户数） 最高同时在线人数（PCU:Peak concurrent users）即在一定时间内，抓取最高在线数据。（例如：单天最高在线：系统每小时统计一次数据，全天24小时共24个不同时刻的在线数据，则24个时间段内最高的用户在线数据为PCU） 充值金额（RMB）：即在一定周期内充值总金额。 元宝消费金额（RMB）：即在一定周期内，玩家在游戏商城中的消费总金额（仔细看，充值金额与元宝消费金额有着明显区别，上者受活动影响，下者受商城道具需求影响。） 每付费用户平均收益（ARPPU: Average Revenue Per Paying User)：相似于下载游戏的消费比率，（国内很多人以“ARPU”称呼，个人定义不同），此类数据主要衡量付费用户收益（公式：月总收入/月付费用户数） 平均每活跃用户收益（ARPU: Average Revenue Per User）：主要衡量游戏整体贡献收益；毕竟除了付费收益，活跃用户也能产生收益，（一般国内以此数据为核心，各家算法不同）（公式：月总收入/月活跃用户） 平均生命周期：有新增账户在首次进入游戏到最后一次参与游戏的时间天数。比如记录某一个月，这个月里，每个新增用户的生命周期之和/MAU=平均生命周期。 LTV生命周期价值（LTV: Life Time Value）：约定一个计算的生命周期值(比如上个月的平均生命周期，或者约定为15日，即这个月有15日登陆记录的账户数)，符合这个生命周期条件的账户数中，充值金额的和/条件账户数。 每日注册并登陆的用户数（DNU: Daily New Users）：这个言简意赅，就不详谈了，直接从后台抓取即可。 新登用户中只有一次会话的用户（DOSU: Daily One Session Users）：这个也很简单，此类数据主要衡量新用户的质量，买量的可以参考一下。 每日登陆过游戏的用户数（DAU: Daily Active Users）：直接从字面就能了解了，一般从后台抓取。 七天内登陆过游戏的用户数（WAU: Weekly Active Users）：这个还是很好理解，就不废话了，此类数据主要衡量周变化。 30天内登陆过游戏的用户数（MAU: Monthly Active Users）：浅显易懂，主要衡量产量的粘性以及用户的稳定性。 月流失率：（公式：30天前登陆过游戏，30天内未登陆游戏的用户数/MAU） 周流失率：（公式：7天前登陆过游戏，之后7天内未登陆游戏的用户数/WAU） 日流失率：（公式：统计日登陆过游戏，次日未登陆游戏的用户数/统计日DAU） 30日留存率：新用户在首次登陆后的第30天再次登陆游戏的比例 7日留存率：新用户在首次登陆后的第7天再次登陆游戏的比例 3日留存率：新用户在首次登陆后的第3天再次登陆游戏的比例 次日留存率：新用户在首次登陆后的次日再次登陆游戏的比例 二、运营成本投入/运营成本（RMB）：本月为推广游戏而投入的营销及市场费用金额 产出/元宝消费金额（RMB）：玩家周期内（日/周/月）在游戏中的消费总金额 投入产出比（ROI）：简而言之，就是说付出与回报是否成正比。（公式：本月的产出/本月的投入） 单个活跃用户推广成本（RMB）：（公式：本月投入/本月新增活跃用户数） 单个付费用户推广成本（RMB）：（公式：本月投入/本月新增付费用户数） 三、用户状态数据监控活跃用户数：对于活跃用户，每家定义各有不同.7天内有3天登陆过账号的便可成为活跃用户。 新增活跃用户数：首次上线游戏的用户数 流失活跃用户数：上期（7-14天）有过登陆，在本期（最近14天）未登陆的用户数。 回流活跃用户数：上期（7-14天）未登陆，在本期（最近7天）有登陆的用户数。 活跃用户流失率：（公式：（本月流失用户/上月活跃用户）100%） 活跃用户充值率：（公式：（本月活跃付费用户/本月活跃用户）100%） 活跃用户在线时长（单位/小时）：（公式：当期（7天）所有活跃用户在线时长总和/当期（7天）活跃用户数） 付费用户在线时长（单位/小时）：（公式：当期（7天）所有付费用户在线时长总和/当期（7天）付费用户数） 新增活跃用户充值率：（公式：（本月内有充值的新增登录用户/本月总新增登录用户）100%） 新增活跃用户高活跃率：（公式：（本月新增登陆用户中的高活跃用户数/本月新增登陆用户数）100%） 四、活跃用户状态高活跃用户数：（个人定义：）当期（7天）内总在线时长大于或等于12小时的活跃用户数。 新增高活跃用户数：（个人定义：）当期（7天）高活跃用户减去上期（7-14）高活跃用户数。 流失高活跃用户数：（个人定义：）上期（7-14天）在线时长大于等于12小时，当期（7天）在线时间小于12小时的活跃用户数。 回流高活跃用户数：（个人定义：）上期（7-14天）在线时间小于12小时，当期（7天）（）在线时长大于等于12小时的活跃用户数 高活跃用户流失率：（个人定义：）公式：（当期（7天）流失高活跃用户数/上期（7-14）高活跃用户数）100% 高活跃用户充值率：（个人定义：）公式：（当期（7天）有充值行为的高活跃用户数/当期（7天）高活跃用户数）100% 新增高活跃用户充值率：（个人定义：）公式（本月新增登陆用户中的高活跃用户数/本月新增登陆用户数）*100% 五、付费用户状态付费用户数：截止到统计日，所以曾经有过充值的用户总数。 新增付费用户数：当期付费用户数减去上期付费用户数。 活跃付费用户数（APC）：当期（周/月）有过充值行为的用户数。 流失付费用户数：上期有登陆行为，当期没有登陆的付费用户数。 回流付费用户数：上期未登陆，在当期有登陆的付费用户数。 付费用户流失率：当期流失付费用户数/上期活跃付费数。 付费用户月平均充值次数：当期所有充值次数/当期付费用户数。 付费用户月平均充值金额（RMB）：当期充值总额/当期付费用户数。 忠实付费用户数：当期统计结束，后续2-3期之内，每期都有充值行为的用户数。 上文的“当期”即现在周期的意思，例如3天、7天、30天都是一周期。 六、高效用户周高效：（个人定义：）当期累计在线时长达到6小时以上，或者该账户在游戏类充值达到一定金额（例如5元）。 双周高效：（个人定义：）当期累计在线时长达到12小时以上，或者该账户在游戏中消费达到一定金额（例如5元）。 月（自然月高效）：（个人定义：）当期累计在线时长达到24小时以上，或者账户在游戏中消费达到一定金额（例如10元）。","categories":[],"tags":[],"keywords":[]},{"title":"laravel","slug":"laravel/demo","date":"2019-01-16T00:40:40.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2019/01/16/laravel/demo/","link":"","permalink":"https://xiumao.github.io/blog/2019/01/16/laravel/demo/","excerpt":"","text":"laravellaravel包 安装composer require barryvdh/laravel-debugbar:~2.4 composer require barryvdh/laravel-ide-helper composer require guzzlehttp/guzzle composer require arcanedev/log-viewer ^4.4 composer update laravel 配置1. sudo chmod -R 777 storage 2. sudo chmod -R 777 bootstrap/cache 3. sudo cp .env.example .env 4. php artisan key:generate 5. jianshu/config/app.php &apos;timezone&apos; =&gt; &apos;PRC&apos;, 配置迁移命令生成的默认字符串长度Schema::defaultStringLength(191); laravel 使用路由 route 模板 blade 控制器 controller 数据迁移 migration php artisan make:migration create_posts_table php artisan migrate 模型 model 1. 模型创建 php artisan make:model Post Schema::create(&apos;posts&apos;, function (Blueprint $table) { $table-&gt;increments(&apos;id&apos;); $table-&gt;string(&apos;title&apos;, 100)-&gt;default(&quot;&quot;); $table-&gt;text(&apos;content&apos;); $table-&gt;integer(&apos;user_id&apos;)-&gt;default(0); $table-&gt;timestamps(); }); 2. 模型关联 一对一 hasOne 用户 手机 一对多 hasMany 文章 评论 一对多反向 belongsTo 评论 文章 多对多 belongsToMany 用户 角色 远层一对多 hasManyThrough 国家 作者 文章 多态关联 morphMany 文章/视频 评论 多态多对多 morphToMany 文章/视频 标签 3. 模型预加载 APP\\Book::with(&apos;author&apos;)-&gt;get(); $book-&gt;load(&apos;author&apos;); 模型关联计数 App\\Post::withCount(&apos;comments&apos;)-&gt;get(); 数据填充 faker seed jianshu/database/factories/UserFactory.php $factory-&gt;define(App\\Post::class, function (Faker $faker) { return [ &apos;title&apos; =&gt; $faker-&gt;sentence(6), &apos;content&apos; =&gt; $faker-&gt;paragraph(10), ]; }); 命令行 tinker php artisan tinker factory(App\\Post::class,10)-&gt;create(); 分页 paging 开发流程 列表 index 分页 页面显示字符截断 str_limit 详情 show 新增 create 控制器 csrf 保存model create 验证和错误提示 错误提示本地化 修改 edit update `{{ method_field('PUT') }}` `{{ csrf_field() }}` 删除 delete 参考资料 laravle文档 bootscrap文档 faker文档 carbon文档","categories":[],"tags":[],"keywords":[]},{"title":"phpstorm","slug":"phpstorm/config","date":"2019-01-15T08:18:35.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2019/01/15/phpstorm/config/","link":"","permalink":"https://xiumao.github.io/blog/2019/01/15/phpstorm/config/","excerpt":"","text":"phpstorm美化viewtool bottons status bar navigation bar preferencesweb browsers show browser popup in the editor plugins browse repositories .env files support material theme UI command+shift+Abreadcrumbs dont show code folding show code folding outline show method separators show right margin phpstorm单元测试languages &amp; frameworks PHP CLI php环境变量 text frameworks phpunit local use composer autoloader 文件vendor/autoload.php ctrl + shift + A 查找 run context configuration 快捷键","categories":[],"tags":[],"keywords":[]},{"title":"tools","slug":"tools/gitbook","date":"2018-12-14T12:05:36.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2018/12/14/tools/gitbook/","link":"","permalink":"https://xiumao.github.io/blog/2018/12/14/tools/gitbook/","excerpt":"","text":"GitBook教程学习GitBook推荐 GitBook推荐博客 GitBook用法 配置文件book.json { &quot;title&quot;: &quot;&quot;, &quot;language&quot;: &quot;zh-hans&quot;, &quot;plugins&quot;: [ &quot;-sharing&quot;, &quot;copy-code-button&quot;, &quot;anchor-navigation-ex&quot;, &quot;-lunr&quot;, &quot;-search&quot;, &quot;search-plus&quot;, &quot;expandable-chapters-small&quot;, &quot;splitter&quot; ], &quot;pluginsConfig&quot;: { &quot;theme-default&quot;: { &quot;showLevel&quot;: true }, &quot;anchor-navigation-ex&quot;: { &quot;showLevel&quot;: true, &quot;associatedWithSummary&quot;: false, &quot;multipleH1&quot;: false, &quot;float&quot;: { &quot;showLevelIcon&quot;: true, &quot;level1Icon&quot;: &quot;fa fa-hand-o-right&quot;, &quot;level2Icon&quot;: &quot;fa fa-hand-o-right&quot;, &quot;level3Icon&quot;: &quot;fa fa-hand-o-right&quot; } } } } package.json { &quot;dependencies&quot;: { &quot;gitbook&quot;: &quot;&gt;=3.0.0&quot;, &quot;gitbook-plugin-anchor-navigation-ex&quot;: &quot;^1.0.11&quot;, &quot;gitbook-plugin-copy-code-button&quot;: &quot;^0.0.2&quot;, &quot;gitbook-plugin-expandable-chapters-small&quot;: &quot;^0.1.7&quot;, &quot;gitbook-plugin-search-plus&quot;: &quot;^1.0.4-alpha-3&quot;, &quot;gitbook-plugin-search-pro&quot;: &quot;^2.0.2&quot;, &quot;gitbook-plugin-splitter&quot;: &quot;^0.0.8&quot;, &quot;gitbook-plugin-theme-faq&quot;: &quot;^1.2.1&quot; } }","categories":[],"tags":[],"keywords":[]},{"title":"linux","slug":"linux/git","date":"2018-12-04T03:28:27.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2018/12/04/linux/git/","link":"","permalink":"https://xiumao.github.io/blog/2018/12/04/linux/git/","excerpt":"","text":"Git获取指定用户时间段提交日志 git log –author=”zhangphil” –after=”2018-05-21 00:00:00” –before=”2018-05-25 23:59:59” 简易的命令行入门教程:Git 全局设置:git config --global user.name &quot;xxx&quot; git config --global user.email &quot;xxx@163.com&quot; 创建 git 仓库:mkdir test cd test git init touch README.md git add README.md git commit -m &quot;first commit&quot; git remote add origin https://gitee.com/xxx/test.git git push -u origin master 已有项目?cd existing_git_repo git remote add origin https://gitee.com/xxx/test.git git push -u origin master 记住密码git config --global --list git config --global credential.helper store","categories":[],"tags":[],"keywords":[]},{"title":"mysql","slug":"mysql/user","date":"2018-11-26T13:26:01.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2018/11/26/mysql/user/","link":"","permalink":"https://xiumao.github.io/blog/2018/11/26/mysql/user/","excerpt":"","text":"mysqlmysql* 远程连接上Linux系统，确保Linux系统已经安装上了MySQL数据库。 * 登陆数据库。mysql -uroot -p（密码） * 创建用户用来远程连接 * GRANT ALL PRIVILEGES ON *.* TO &apos;xiumao&apos;@&apos;%&apos; IDENTIFIED BY &apos;xiumao&apos; WITH GRANT OPTION; * 第一个xiumao表示用户名 * %表示所有的电脑都可以连接，也可以设置某个ip地址运行连接 * 第二个xiumao表示密码 * 查询数据库的用户（看到如下内容表示创建新用户成功了） * SELECT DISTINCT CONCAT(&apos;User: &apos;&apos;&apos;,user,&apos;&apos;&apos;@&apos;&apos;&apos;,host,&apos;&apos;&apos;;&apos;) AS query FROM mysql.user; * 修改用户密码 * set password for root@localhost = password(&apos;123&apos;); * 删除用户 * Delete FROM mysql.user Where User=&apos;xiumao&apos;; * 执行 flush privileges; 命令立即生效 * flush privileges;","categories":[],"tags":[],"keywords":[]},{"title":"tools","slug":"tools/showdoc","date":"2018-11-15T07:48:05.000Z","updated":"2019-03-27T02:08:04.305Z","comments":true,"path":"2018/11/15/tools/showdoc/","link":"","permalink":"https://xiumao.github.io/blog/2018/11/15/tools/showdoc/","excerpt":"","text":"showdoc 安装","categories":[],"tags":[],"keywords":[]},{"title":"linux","slug":"linux/svn","date":"2018-10-07T12:35:08.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2018/10/07/linux/svn/","link":"","permalink":"https://xiumao.github.io/blog/2018/10/07/linux/svn/","excerpt":"","text":"subversion获取指定用户时间段提交日志 svn log -r {2019-03-13}:{2019-03-14} | sed -n ‘/zhangzhenlong/,/–$/ p’ export svn export [-r 版本号] (url或目录或文件的全路径) [本地目录全路径] –username –password –no-auth-cache svn help svn export –help 创建分支或者标签 svn copy url(trunk) url(branches/tags) -m “add 1.0 released” –username –password –no-auth-cache 删除分支或者标签 svn rm url(branches/tags) -m “rm 1.0 released” –username –password –no-auth-cache 获取分支或者标签信息 svn info url(branches/tags) –username zhangzhenlong –password zhangzhenlong0416 –no-auth-cache 1. 本地开发完成 提交svn 2. svn copy 打tags 查看单个tag svn info url(tag) 并获取tag中的Last Changed Rev: 1 3. 线上发布 svn export -r 1 url(tag) 4. 第二次发布 svn copy 打tags 查看单个tag svn info url(tag) 并获取tag中的Last Changed Rev: 2 5. 线上发布 svn export -r 2 url(tag) 6. 回滚 查看所有tags svn info url(tags) 获取前一个tag的版本号 1 svn export -r 1 url(tags) 管理员 用户 CURD 项目 CURD 发布记录 测试按钮 发布代码到测试机器 自动生成版本号 上线按钮 发布代码到线上机器（下拉选版本） 回滚按钮 可以回滚到指定版本（下拉选版本）","categories":[],"tags":[],"keywords":[]},{"title":"tools","slug":"tools/vscode","date":"2018-09-27T14:35:00.000Z","updated":"2019-03-27T02:08:04.305Z","comments":true,"path":"2018/09/27/tools/vscode/","link":"","permalink":"https://xiumao.github.io/blog/2018/09/27/tools/vscode/","excerpt":"","text":"配置宏命令 行尾自动加分号 第一步 文件 C:\\Users\\Administrator\\AppData\\Roaming\\Code\\User\\settings.json 1234567891011\"macros\": &#123; \"end_semicolon\": [ // 末尾加分号 \"cursorLineEnd\", &#123; \"command\": \"type\", \"args\": &#123; \"text\": \";\" &#125; &#125;, ] &#125; 第二步 文件 C:\\Users\\Administrator\\AppData\\Roaming\\Code\\User\\keybindings.json 1234&#123; \"key\": \"ctrl+Enter\", \"command\": \"macros.end_semicolon\" &#125;","categories":[],"tags":[],"keywords":[]},{"title":"laravel","slug":"laravel/laravel_admin55_dep","date":"2018-09-26T08:03:33.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2018/09/26/laravel/laravel_admin55_dep/","link":"","permalink":"https://xiumao.github.io/blog/2018/09/26/laravel/laravel_admin55_dep/","excerpt":"","text":"laravel 5.5微信扩展包 EasyWeChat composer require overtrue/laravel-wechat:~4.0 HTTP扩展包 Guzzlehttp composer require guzzlehttp/guzzle 后台扩展包 Laravel-admin composer require encore/laravel-admin 1.5.* IDE提示 laravel-ide-helper composer require barryvdh/laravel-ide-helper 部署 时区设置 本地化设置 文件 wx.hzyuewan.com\\config\\app.php &#39;timezone&#39; =&gt; &#39;UTC&#39; =&gt; &#39;timezone&#39; =&gt; &#39;PRC&#39; &#39;locale&#39; =&gt; &#39;en&#39; =&gt; &#39;locale&#39; =&gt; &#39;zh-CN&#39; 索引长度 &amp; MySQL / MariaDB 文件 wx.hzyuewan.com\\app\\Providers\\AppServiceProvider.php boot方法 加入 Schema::defaultStringLength(191); 数据库配置 .env文件 修改 `DB_HOST=127.0.0.1` `DB_PORT=3306` `DB_DATABASE=wechat` `DB_USERNAME=root` `DB_PASSWORD=root` 新增 `APP_LOG=daily` laravel-admin 安装 php artisan vendor:publish --provider=&quot;Encore\\Admin\\AdminServiceProvider&quot; php artisan admin:install 默认账号密码 admin admin Laravel-admin upload setting 文件 wx.hzyuewan.com\\config\\filesystems.php 代码示例 &apos;disks&apos; =&gt; [ ... , &apos;admin&apos; =&gt; [ &apos;driver&apos; =&gt; &apos;local&apos;, &apos;root&apos; =&gt; public_path(&apos;uploads&apos;), &apos;visibility&apos; =&gt; &apos;public&apos;, &apos;url&apos; =&gt; env(&apos;APP_URL&apos;).&apos;/uploads&apos;, ], ], laravel-admin-extensions/log-viewer composer require laravel-admin-ext/log-viewer -vvv php artisan admin:import log-viewer Open http://localhost/admin/logs. 开发 创建 模型,迁移表,控制器 php artisan make:model Admin/Models/OfficialAccount -m php artisan admin:make OfficialAccountController --model=App\\\\Admin\\\\Models\\\\OfficialAccount","categories":[],"tags":[],"keywords":[]},{"title":"tools","slug":"tools/tools","date":"2018-09-23T14:35:11.000Z","updated":"2019-03-27T02:08:04.305Z","comments":true,"path":"2018/09/23/tools/tools/","link":"","permalink":"https://xiumao.github.io/blog/2018/09/23/tools/tools/","excerpt":"","text":"工具SwitchHosts SwitchHosts 作为JavaScript开发人员，这些必备的VS Code插件你都用过吗https://my.oschina.net/powertoolsteam/blog/1932551 Hadoop - 企业级大数据管理平台CDH(介绍和准备工作)https://my.oschina.net/wenzhenxi/blog/1926697 Hadoop - 企业级大数据管理平台CDH(安装Hadoop组件)https://my.oschina.net/wenzhenxi/blog/1932543 ELK构建MySQL慢日志收集平台详解https://my.oschina.net/37Y37/blog/1928684 从React Native到微服务，落地一个全栈解决方案https://www.oschina.net/question/148170_2283001","categories":[],"tags":[],"keywords":[]},{"title":"mysql","slug":"mysql/log","date":"2018-09-17T04:38:14.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2018/09/17/mysql/log/","link":"","permalink":"https://xiumao.github.io/blog/2018/09/17/mysql/log/","excerpt":"","text":"general log 开启 general log 将所有到达MySQL Server的SQL语句记录下来。 一般不会开启开功能，因为log的量会非常庞大。但个别情况下可能会临时的开一会儿general log以供排障使用。 相关参数一共有3：general_log、log_output、general_log_file show variables like ‘general_log’;set global general_log=on; – 开启日志功能 show variables like ‘general_log_file’; – 看看日志文件保存位置set global general_log_file=’tmp/general.lg’; – 设置日志文件保存位置 show variables like ‘log_output’; – 看看日志输出类型 table或fileset global log_output=’table’; – 设置输出类型为 tableset global log_output=’file’; – 设置输出类型为file","categories":[],"tags":[],"keywords":[]},{"title":"mysql","slug":"mysql/dml","date":"2018-09-15T07:57:23.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2018/09/15/mysql/dml/","link":"","permalink":"https://xiumao.github.io/blog/2018/09/15/mysql/dml/","excerpt":"","text":"CURDupdate set sql_safe_updates = 0; update ignore user_day_pay set game_id = 100000280 where game_id = 100000297; delete delete from user_day_pay where game_id = xxx;","categories":[],"tags":[],"keywords":[]},{"title":"laravel","slug":"laravel/package","date":"2018-09-12T02:45:39.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2018/09/12/laravel/package/","link":"","permalink":"https://xiumao.github.io/blog/2018/09/12/laravel/package/","excerpt":"","text":"Laravel5.5 laravel-package使用 Laravel Generator 快速为 Laravel 应用生成CRUD、API、测试用例代码&quot;infyomlabs/laravel-generator&quot;: &quot;5.6.x-dev&quot;, &quot;laravelcollective/html&quot;: &quot;^5.5.0&quot;, &quot;infyomlabs/adminlte-templates&quot;: &quot;5.6.x-dev&quot;, &quot;infyomlabs/swagger-generator&quot;: &quot;dev-master&quot;, &quot;jlapp/swaggervel&quot;: &quot;dev-master&quot;, &quot;doctrine/dbal&quot;: &quot;~2.3&quot;, PHP HTTP 客户端&quot;guzzlehttp/guzzle&quot;: &quot;^6.3&quot;, EXCEL表格&quot;maatwebsite/excel&quot;: &quot;~2.1.0&quot;, HTML Purifier –非常好用的XSS过滤器&quot;mews/purifier&quot;: &quot;^2.0&quot;, EasyWeChat 是一个基于 MIT 协议开源的非官方微信 SDK.&quot;overtrue/wechat:~4.0&quot;, 阿里OSS&quot;jacobcyl/ali-oss-storage&quot;: &quot;dev-master&quot;, IDE开发工具&quot;barryvdh/laravel-ide-helper&quot;: &quot;^2.4&quot;, 调试工具&quot;barryvdh/laravel-debugbar&quot;: &quot;^3.1&quot;, PHP代码规范https://github.com/FriendsOfPHP/PHP-CS-Fixer 集中错误服务器sentryhttps://sentry.io 用户日志&quot;spatie/laravel-activitylog&quot;: &quot;^2.5&quot;, 爬虫工具&quot;jaeger/querylist&quot;: &quot;^4.0&quot;, &quot;jaeger/querylist-phantomjs&quot;: &quot;^4.0&quot;, LOG日志&quot;arcanedev/log-viewer&quot;: &quot;^4.4&quot;, Laravel5.5&quot;filp/whoops&quot;: &quot;~2.0&quot;, &quot;fzaninotto/faker&quot;: &quot;~1.4&quot;, &quot;mockery/mockery&quot;: &quot;0.9&quot;, &quot;phpstan/phpstan&quot;: &quot;^0.9.2&quot;, &quot;phpunit/phpunit&quot;: &quot;~6.0&quot;, &quot;laravel/dusk&quot;: &quot;v2.0.14&quot;, Laravel后台&quot;tcg/voyager&quot;: &quot;^1.0&quot; 全文搜索 官网 集成包 分词 medcl/elasticsearch-analysis-ik laravel &quot;laravel/scout&quot;: &quot;v3.0.14&quot; &quot;tamayo/laravel-scout-elastic&quot;: &quot;^3.0&quot; 后台模板composer require &quot;almasaeed2010/adminlte=~2.4&quot;","categories":[],"tags":[],"keywords":[]},{"title":"mongo","slug":"mongo/mongo","date":"2018-09-04T13:44:14.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2018/09/04/mongo/mongo/","link":"","permalink":"https://xiumao.github.io/blog/2018/09/04/mongo/mongo/","excerpt":"","text":"mongo导入 使用mongo命令将数据库删除 use db_name; db.dropDatabase() 导入（指定文件夹）数据 linux命令：mongorestore -d db_name 文件夹目录 windows命令：mongorestore.exe -d db_name 文件夹目录","categories":[],"tags":[],"keywords":[]},{"title":"linux","slug":"linux/lnmp","date":"2018-08-15T03:26:41.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2018/08/15/linux/lnmp/","link":"","permalink":"https://xiumao.github.io/blog/2018/08/15/linux/lnmp/","excerpt":"lnmp-installPHP1.命令 wget http://hk1.php.net/get/php-5.4.45.tar.gz/from/this/mirror 2.命令 tar -zxvf mirror 3.命令 cd php-5.4.45 4.命令 ./configure --prefix=/usr/local/php5.4 --enable-fpm 5.命令 make 6.命令 sudo make install","text":"lnmp-installPHP1.命令 wget http://hk1.php.net/get/php-5.4.45.tar.gz/from/this/mirror 2.命令 tar -zxvf mirror 3.命令 cd php-5.4.45 4.命令 ./configure --prefix=/usr/local/php5.4 --enable-fpm 5.命令 make 6.命令 sudo make install 命令启动PHP-FPM sudo /usr/local/php/sbin/php-fpm 查找进程任务 ps -aux |grep php-fpm 杀死进程 kill -int(quit) 进程ID 资源 VirtualBox下载 CentOs下载 PHP下载 Mysql下载 apache下载 archive-apache下载 pcre下载 nginx下载","categories":[],"tags":[],"keywords":[]},{"title":"tools","slug":"tools/optimize","date":"2018-08-07T08:05:44.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2018/08/07/tools/optimize/","link":"","permalink":"https://xiumao.github.io/blog/2018/08/07/tools/optimize/","excerpt":"","text":"短信发送组件 https://github.com/overtrue/easy-sms 微信SDK组件 https://github.com/overtrue/laravel-wechat 阿里OSS https://github.com/aliyun/aliyun-oss-php-sdk Laravel Excel https://github.com/Maatwebsite/Laravel-Excel 图片处理 https://github.com/Intervention/image HTTP请求 https://github.com/guzzle/guzzle DUBUG https://github.com/barryvdh/laravel-debugbar 代码提示 https://github.com/barryvdh/laravel-ide-helper","categories":[],"tags":[],"keywords":[]},{"title":"me","slug":"me/wx","date":"2018-07-27T04:05:42.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2018/07/27/me/wx/","link":"","permalink":"https://xiumao.github.io/blog/2018/07/27/me/wx/","excerpt":"","text":"微信开发第二步：验证消息的确来自微信服务器1234567891011121314151617181920&lt;?phpfunction checkSignature($token) &#123; $signature = $_GET[&quot;signature&quot;]; $timestamp = $_GET[&quot;timestamp&quot;]; $nonce = $_GET[&quot;nonce&quot;]; $tmpArr = array($token, $timestamp, $nonce); sort($tmpArr, SORT_STRING); $tmpStr = implode($tmpArr); return sha1($tmpStr) == $signature;&#125;// 微信公众后台填写的Token$token = &apos;hello&apos;;// 如果验证正确，则返回参数echostr的内容，否则终止执行if(checkSignature($token)) &#123; echo $_GET[&apos;echostr&apos;];&#125;exit();","categories":[],"tags":[],"keywords":[]},{"title":"me","slug":"me/account","date":"2018-07-27T04:00:42.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2018/07/27/me/account/","link":"","permalink":"https://xiumao.github.io/blog/2018/07/27/me/account/","excerpt":"","text":"账号公众号836360225@qq.com 公众号15068186501@163.com 小程序xiumao@outlook.com 1801155081@qq.com","categories":[],"tags":[],"keywords":[]},{"title":"linux","slug":"linux/yum","date":"2018-07-04T09:53:24.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2018/07/04/linux/yum/","link":"","permalink":"https://xiumao.github.io/blog/2018/07/04/linux/yum/","excerpt":"","text":"安装包svn安装 yum install subversion -y","categories":[],"tags":[],"keywords":[]},{"title":"tools","slug":"tools/apidoc","date":"2018-07-01T12:26:09.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2018/07/01/tools/apidoc/","link":"","permalink":"https://xiumao.github.io/blog/2018/07/01/tools/apidoc/","excerpt":"","text":"apidocSTEP1 git和node安装（node带有npm） git 默认安装 node 安装教程 node是否安装成功 cmd命令输入 node –version node是否安装 npm –version npm是否安装 path 查看环境变量 node是否全局可用 STEP2 安装apidocnpm install apidoc -g 全局安装 apidoc -h apidoc是否安装 apidoc -i myapp/ -o apidoc/ 把myapp的api文档生成到apidoc目录下 STEP3 DEMO新建文件夹example 在example中新建配置文件apidoc.json apidoc.json写入内容 12345678&#123; \"name\": \"DEMO\", \"version\": \"0.0.1\", \"description\": \"DEMO_DESCRIPTION\", \"title\": \"DEMO_TEST\", \"url\" : \"https://developer.github.com/v3/\"&#125; example新建demo.php写入代码 123456789101112131415161718192021222324252627&lt;?php/** * @api &#123;get&#125; /user/:id Request User information * @apiName GetUser * @apiGroup User * * @apiParam &#123;Number&#125; id Users unique ID. * * @apiSuccess &#123;String&#125; firstname Firstname of the User. * @apiSuccess &#123;String&#125; lastname Lastname of the User. * * @apiSuccessExample Success-Response: * HTTP/1.1 200 OK * &#123; * &quot;firstname&quot;: &quot;John&quot;, * &quot;lastname&quot;: &quot;Doe&quot; * &#125; * * @apiError UserNotFound The id of the User was not found. * * @apiErrorExample Error-Response: * HTTP/1.1 404 Not Found * &#123; * &quot;error&quot;: &quot;UserNotFound&quot; * &#125; */ cmd命令行运行 apidoc -i example/ -o apidoc/` 打开apidoc里面的index.html即可看见接口文档","categories":[],"tags":[],"keywords":[]},{"title":"tools","slug":"tools/interface","date":"2018-07-01T12:26:09.000Z","updated":"2019-03-27T02:22:32.037Z","comments":true,"path":"2018/07/01/tools/interface/","link":"","permalink":"https://xiumao.github.io/blog/2018/07/01/tools/interface/","excerpt":"","text":"面向接口编程Demo123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?phpinterface js&#123; function ys($a, $b);&#125;class Jf implements js&#123; function ys($a, $b) &#123; return \"减法运算......结果为:\" . ($a - $b); &#125;&#125;class China implements js&#123; public $varl = null;//这里直接：public $varl = new nothingx(); 会出错。 function __construct() &#123; $this-&gt;varl = new nothingx(); &#125; function ys($a, $b) &#123; return $this-&gt;varl-&gt;say(); &#125;&#125;class nothingx&#123; function say() &#123; return \"我什么运算都不做...只是为了实现&lt;font color=#990000&gt; &lt;b&gt;‘耦合设计模式'&lt;/b&gt;&lt;/font&gt;...我是出来打酱油的......\"; &#125;&#125;class test&#123; private $one; private $two; public function __construct($x, $y) &#123; $this-&gt;one = $x; $this-&gt;two = $y; echo \"&lt;font size=20px&gt;&lt;strong&gt;面向对象程序设计——接口&lt;/font&gt; &lt;/strong&gt;&lt;hr&gt;Class test初始化：&lt;br&gt; 属性\\$one=\" . $this-&gt;one . \" 属性\\$two=\" . $this-&gt;two . \"&lt;hr&gt;\"; &#125; function display(js $a) &#123; return \"&lt;font color=#990000&gt;&lt;b&gt;用PHP接口技术实现的运算——开始运算啦: &lt;/b&gt;&lt;/font&gt;&lt;hr&gt;\" . $a-&gt;ys($this-&gt;one, $this-&gt;two) . \"&lt;hr&gt;\"; &#125;&#125;$t = new test(103, 2);$t1 = new jf;$t2 = new China;echo $t-&gt;display($t1);echo $t-&gt;display($t2);","categories":[],"tags":[],"keywords":[]},{"title":"mysql","slug":"mysql/index","date":"2018-06-25T06:54:38.000Z","updated":"2019-03-27T02:08:04.301Z","comments":true,"path":"2018/06/25/mysql/index/","link":"","permalink":"https://xiumao.github.io/blog/2018/06/25/mysql/index/","excerpt":"","text":"mysql模糊查询user_name 普通索引 索引无效 where user_name like &apos;%西%&apos; where user_name like &apos;%西&apos; 索引有效 where user_name like &apos;西%&apos;","categories":[],"tags":[],"keywords":[]},{"title":"linux","slug":"linux/svnserve","date":"2018-06-19T05:08:43.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2018/06/19/linux/svnserve/","link":"","permalink":"https://xiumao.github.io/blog/2018/06/19/linux/svnserve/","excerpt":"","text":"svnserve 安装 yum install subversion svnserve –version 命令ps aux | grep svn kill -9 pid 修改默认数据目录vi /etc/sysconfig/svnserve 将这行代码 OPTIONS=&quot;-r /var/svn&quot;; 修改为 OPTIONS=&quot;-r /home/svnrepo&quot;; 然后创建仓库根目录 mkdir /home/svnrepo 创建版本库 vnadmin create /home/svnrepo/test 创建完成后进到/home/svnrepo/test/conf目录下 修改 authz、passwd、svnserve.conf 这三个文件 vi authz 添加下面的代码 [/] admin = rw vi passwd 添加账号对应的密码 admin = 123456 vi svnserve.conf 把下面五行代码前的注释;打开，并修改为下面所示。 anon-access = none # 未登录用户不给任何权限 auth-access = write # 授权用户的权限 authz-db = authz # 用户权限配置文件 password-db = passwd # 用户密码配置文件 realm = spring-hello-world # 版本库的认证域，在登录时提示的认证域名称 启动SVN服务sudo systemctl start svnserve.service 设置成开机启动sudo systemctl enable svnserve.service 到这应该就完成了，如果检出无相应，查看是不是防火墙没有开启3690端口","categories":[],"tags":[],"keywords":[]},{"title":"linux","slug":"linux/vim","date":"2018-06-16T13:39:48.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2018/06/16/linux/vim/","link":"","permalink":"https://xiumao.github.io/blog/2018/06/16/linux/vim/","excerpt":"","text":"vim命令","categories":[],"tags":[],"keywords":[]},{"title":"linux","slug":"linux/links","date":"2018-06-10T02:49:46.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2018/06/10/linux/links/","link":"","permalink":"https://xiumao.github.io/blog/2018/06/10/linux/links/","excerpt":"","text":"链接Laravel http://laravel-admin.org/docs/#/zh/ http://laravelacademy.org/laravel-docs-5_4 https://laravel-china.org/ Golang https://gobyexample.xgwang.me/","categories":[],"tags":[],"keywords":[]},{"title":"problem","slug":"date/20180529","date":"2018-05-29T02:21:29.000Z","updated":"2019-03-27T02:08:04.297Z","comments":true,"path":"2018/05/29/date/20180529/","link":"","permalink":"https://xiumao.github.io/blog/2018/05/29/date/20180529/","excerpt":"","text":"问题阿里云模版短信 变量不支持透传url，同时检查通过变量是否透传了一些敏感信息触发关键字 阿里云域名解析API 签名字符串需要urlencode编码 否则会解析错误","categories":[],"tags":[],"keywords":[]},{"title":"tour","slug":"tour","date":"2018-03-03T03:15:38.000Z","updated":"2019-03-27T02:10:57.365Z","comments":true,"path":"2018/03/03/tour/","link":"","permalink":"https://xiumao.github.io/blog/2018/03/03/tour/","excerpt":"旅游","text":"旅游 lvyou","categories":[],"tags":[],"keywords":[]},{"title":"sms","slug":"sms","date":"2018-03-03T03:15:38.000Z","updated":"2019-03-27T02:10:57.365Z","comments":true,"path":"2018/03/03/sms/","link":"","permalink":"https://xiumao.github.io/blog/2018/03/03/sms/","excerpt":"短信功能思考","text":"短信功能思考 防刷 思考如果防止被刷手机号 发送次数 发送时间一分钟允许发送的次数 单位时间内 允许发送的 次数 发送时间间隔 制定规则 可插拔一种规则 一张表 满足规则 通过 否则异常","categories":[],"tags":[],"keywords":[]}]}